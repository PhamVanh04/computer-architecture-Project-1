.data
	#Instruction, include opcode and maximum 3 operand
	input: 	.space 	100
	opcode: .space 	10
	opr1:	.space	40
	opr2:	.space	40
	opr3:	.space	40
	address:.space	40
	#Instruction Pattern
	#r=register, i=immediate, f=float register, l=label, s=special address, x: nothing
	type: .asciiz "x", "r", "i", "f", "l", "s"
    	register: .asciiz 
    		"$zero", "$at", "$v0", "$v1", "$a0", "$a1", "$a2", "$a3", 
    		"$t0", "$t1", "$t2", "$t3", "$t4", "$t5", "$t6", "$t7", 
    		"$s0", "$s1", "$s2", "$s3", "$s4", "$s5", "$s6", "$s7", 
    		"$t8", "$t9", "$k0", "$k1", "$gp", "$sp", "$fp", "$ra",
    		"$0", "$1", "$2", "$3", "$4", "$5", "$6", "$7", "$8", 
    		"$9", "$10", "$11", "$12", "$13", "$14", "$15", "$16", 
    		"$17", "$18", "$19", "$20", "$21", "$22", "$23", "$24", 
    		"$25", "$26", "$27", "$28", "$29", "$30", "$31", "$32" ,"\0"
    	
    	
    	float: .asciiz 
    		"$f0", "$f1", "$f2", "$f3", "$f4", "$f5", "$f6", "$f7", 
    		"$f8", "$f9", "$f10", "$f11", "$f12", "$f13", "$f14", "$f15", 
    		"$f16", "$f17", "$f18", "$f19", "$f20", "$f21", "$f22", "$f23", 
    		"$f24", "$f25", "$f26", "$f27", "$f28", "$f29", "$f30", "$f31", "\0"
    	instructions: .asciiz 
    		"abs.d","ffx"," ","1",
    		"abs.s","ffx"," ","1",
    		"add","rrr","R","4",
    		"add.d","rrr"," ","1",
    		"add.s","rrr"," ","1",
    		"addi","rri","I","4",
  	  	"addiu","rri","I","4",
    		"addu","rrr","R","4",
    		"and","rrr","R","4",
    		"andi","rri","I","4",    
    		"bc1f","lxx"," ","2",
    		"bc1t","lxx"," ","2",
    		"beq","rrl","I","3",
    		"bgez","rlx","I","3",
    		"bgezal","rlx","I","3",
    		"bgtz","rlx","I","3",
    		"blez","rlx","I","3",
    		"bltz","rlx","I","3",
    		"bltzal","rlx","I","3",
    		"bne","rrl","I","3",
    		"break","xxx","R","4",
    		"c.eq.d","ffx"," ","2",
    		"c.eq.s","ffx"," ","2",
    		"c.le.d","ffx"," ","2",
    		"c.le.s","ffx"," ","2",
    		"c.lt.d","ffx"," ","2",
    		"c.lt.s","ffx"," ","2",
    		"ceil.w.d","ffx"," ","1",
    		"ceil.w.s","ffx"," ","1",
    		"clo","rrx","R","4",
    		"clz","rrx","R","4",
    		"cvt.d.s","ffx","R","4",
    		"cvt.d.w","ffx","R","4",
    		"cvt.s.d","ffx","R","4",
    		"cvt.s.w","ffx","R","4",
    		"cvt.w.d","ffx","R","4",
    		"cvt.w.s","ffx","R","4",
    		"div","rrx","R","4",
    		"div.d","fff","R","4",
    		"div.s","fff","R","4",
    		"divu","rrx","R","4",
    		"eret","xxx","J","2",
    		"floor.w.d","ffx"," ","1",
    		"floor.w.s","ffx"," ","1",
    		"j","lxx","J","3",
    		"jal","lxx","J","4",
    		"jalr","rrx","R","2",
    		"jr","rxx","R","3",
    		"lb","rsx","I","5",
    		"lbu","rsx","I","5",
    		"ldc1","rsx","I","2",
    		"lh","rsx","I","5",
    		"lhu","rsx","I","5",
    		"ll","rsx","I","2",
    		"lui","rix","I","2",
    		"lw","rsx","I","5",
    		"lwc1","rsx","I","2",
    		"lwl","rsx","I","2",
    		"lwr","rsx","I","2",
    		"madd","rrx","R","4",
    		"maddu","rrx","R","4",
    		"mfc0","rrx","R","4",
    		"mfc1","rfx","R","4",
    		"mfhi","rxx","R","4",
    		"mflo","rxx","R","4",
    		"mov.d","ffx"," ","1",
    		"mov.s","ffx"," ","1",
    		"movf","rrx"," ","1",
    		"movf.d","ffx"," ","1",
    		"movf.s","ffx"," ","1",
    		"movn","rrx","R","4",
    		"movn.d","ffx"," ","1",
    		"movn.s","ffx"," ","1",
    		"movt","rrx","I","1",
    		"movt.d","ffx"," ","1",
    		"movt.s","ffx"," ","1",
    		"movz","rrx","R","4",
    		"movz.d","ffx"," ","1",
    		"movz.s","ffx"," ","1",
    		"msub","rrx","R","4",
    		"msubu","rrx","R","4",
    		"mtc0","rrx","R","4",
    		"mtc1","rfx","R","4",
    		"mthi","rxx","R","4",
    		"mtlo","rxx","R","4",
    		"mul","rrr","R","4",
    		"mul.d","fff"," ","3",
    		"mul.s","fff"," ","3",
    		"mult","rrx","R","4",
    		"multu","rrx","R","4",
    		"neg.d","ffx"," ","1",
    		"neg.s","ffx"," ","1",
    		"nop","xxx","R","1",
    		"nor","rrr","R","1",
    		"or","rrr","R","4",
    		"ori","rri","I","1",
    		"round.w.d","ffx"," ","1",
    		"round.w.s","ffx"," ","1",
    		"sb","rsx","I","2",
    		"sc","rsx","R","4",
    		"sdc1","rsx","I","2",
    		"sh","rsx","I","2",
    		"sll","rrx","R","4",
    		"sllv","rrx","R","4",
    		"slt","rrr","R","4",
    		"slti","rri","I","1",
    		"sltiu","rri","I","1",
    		"sltu","rrr","R","4",
    		"sra","rrx","R","4",
    		"srav","rrx","R","4",
    		"srl","rrx","R","4",
    		"srlv","rrx","R","4",
    		"sub","rrr","R","4",
    		"sub.d","rrr"," ","2",
    		"sub.s","rrr"," ","2",
    		"subu","rrr","R","4",
    		"sw","rsx","I","4",
    		"swc1","rsx","I","2",
    		"swl","rsx","I","2",
    		"swr","rsx","I","2",
    		"syscall","xxx"," ","2",
    		"teq","rrx","I","1",
    		"teqi","rri","I","1",
    		"tge","rrx","R","4",
    		"tgei","rri","I","1",
    		"tgeiu","rri","I","1",
    		"tgeu","rrx","R","4",
    		"tlbp","xxx"," ","2",
    		"tlbr","xxx"," ","2",
    		"tlbwi","xxx"," ","2",
    		"tlbwr","xxx"," ","2",
    		"tlt","rrx"," ","1",
    		"tlti","rri","I","1",
    		"tltiu","rri","I","1",
    		"tltu","rrx"," ","1",
    		"tne","rrx"," ","1",
    		"tnei","rri"," ","1",
    		"trunc.w.d","ffx"," ","1",
    		"trunc.w.s","ffx"," ","1",
    		"xor","rrr","R","4",
    		"xori","rri","I","4"
    		
    	#character
    	tab	: "\t" 
    	null	: "\0"
    	enter	: "\n"
    	space	: " "
    	comma	: ","
    	mark	: "'"
    	colon	: ":"
    	
    	#say sth
    	Message: 	.asciiz "Enter an Assembly command: "
    	Message1:	.asciiz "Type of Instruction: "
    	valid: 		.asciiz "valid"
    	invalid:	.asciiz "invalid"
    	say_opcode:	.asciiz "Opcode "
    	say_operand:	.asciiz "Operand "
    	say_cycle:	.asciiz "Number of Clock Cycles: "
.text
#B1 Nhập chuỗi vào input
nhap:	#In ra câu hỏi
	li $v0, 4
	la $a0, Message
	syscall
	#Nhập chuỗi
	li $v0, 8
	la $a0, input
	li $a1, 100
	syscall
	la $s0, input
	addi $s0, $s0, -1
	la $t0, tab
	la $t1, space
	la $t2, comma
	la $t3, enter
#B2: Loại bỏ những dấu cách , dấu phẩy, dấu chấm trước câu lệnh
pre_check: 
	addi $s0, $s0, 1
	lb $s2, 0($s0)
	lb $s1, 0($t1)
	beq $s2, $s1, pre_check
	lb $s1, 0($t2)
	beq $s1, $s2, pre_check
	lb $s1, 0($t0)
	beq $s1, $s2, pre_check
	la $s1, opcode
	addi $s1, $s1, -1
#B3: Lấy ra opcode, opr1, opr2, opr3 
## Lấy ra opcode
opcode_take:
	addi $s1, $s1, 1
	sb $s2, 0($s1)
	addi $s0, $s0, 1
	lb $s2, 0($s0)
	lb $s3, 0($t0)
	beq $s3, $s2, end_take_opcode
	lb $s3, 0($t1)
	beq $s3, $s2, end_take_opcode
	lb $s3, 0($t2)
	beq $s3, $s2, end_take_opcode
	lb $s3, 0($t3)
	beq $s3, $s2, print_opcode
	j opcode_take
end_take_opcode:
	addi $s0, $s0, 1
	lb $s2, 0($s0)
	lb $s3, 0($t0)
	beq $s3, $s2, end_take_opcode
	lb $s3, 0($t3)
	beq $s3, $s2, end_take_opcode
	lb $s3, 0($t1)
	beq $s3, $s2, end_take_opcode
	lb $s3, 0($t2)
	beq $s3, $s2, end_take_opcode
	la $s4, opr1
	addi $s4, $s4, -1
opr1_take:
	addi $s4, $s4, 1
	sb $s2, 0($s4)
	addi $s0, $s0, 1
	lb $s2, 0($s0)
	lb $s3, 0($t0)
	beq $s3, $s2, end_take_opr1
	lb $s3, 0($t1)
	beq $s3, $s2, end_take_opr1
	lb $s3, 0($t2)
	beq $s3, $s2, end_take_opr1
	lb $s3, 0($t3)
	beq $s3, $s2, print_opcode
	j opr1_take
end_take_opr1:
	addi $s0, $s0, 1
	lb $s2, 0($s0)
	lb $s3, 0($t0)
	beq $s3, $s2, end_take_opr1
	lb $s3, 0($t3)
	beq $s3, $s2, end_take_opr1
	lb $s3, 0($t1)
	beq $s3, $s2, end_take_opr1
	lb $s3, 0($t2)
	beq $s3, $s2, end_take_opr1
	la $s4, opr2
	addi $s4, $s4, -1
opr2_take:
	addi $s4, $s4, 1
	sb $s2, 0($s4)
	addi $s0, $s0, 1
	lb $s2, 0($s0)
	lb $s3, 0($t0)
	beq $s3, $s2, end_take_opr2
	lb $s3, 0($t1)
	beq $s3, $s2, end_take_opr2
	lb $s3, 0($t2)
	beq $s3, $s2, end_take_opr2
	lb $s3, 0($t3)
	beq $s3, $s2, print_opcode
	j opr2_take
end_take_opr2:
	addi $s0, $s0, 1
	lb $s2, 0($s0)
	lb $s3, 0($t0)
	beq $s3, $s2, end_take_opr2
	lb $s3, 0($t2)
	beq $s3, $s2, end_take_opr2
	lb $s3, 0($t3)
	beq $s3, $s2, end_take_opr2
	lb $s3, 0($t1)
	beq $s3, $s2, end_take_opr2
	la $s4, opr3
	addi $s4, $s4, -1
opr3_take:
	addi $s4, $s4, 1
	sb $s2, 0($s4)
	addi $s0, $s0, 1
	lb $s2, 0($s0)
	lb $s3, 0($t3)
	beq $s3, $s2, print_opcode
	j opr3_take
print_opcode:
	la $s0, instructions
	la $s1, opcode
	li 	$v0, 4
	la 	$a0, say_opcode
	syscall
	li 	$v0, 4
	la 	$a0, mark
	syscall
	li 	$v0, 4
	la 	$a0, opcode
	syscall
	li 	$v0, 4
	la 	$a0, mark
	syscall
	li 	$v0, 4
	la 	$a0, colon
	syscall
	li 	$v0, 4
	la 	$a0, space
	syscall
check_opcode:
	lb $s2, 0($s0)
	lb $s3, 0($s1)
	bne $s2, $s3, next_opcode
	addi $s0, $s0, 1
	addi $s1, $s1, 1
	lb $s4, 0($s1)
	beqz $s4, opcode_endcheck
	j check_opcode
 next_opcode:
 	beqz $s2, next_instruct
 	addi $s0, $s0, 1
 	lb $s2, 0($s0)
 	j next_opcode
next_instruct:
	addi $s0, $s0, 9
	lb $s2, 0($s0)
	beqz $s2, invalid_opcode
	la $s1, opcode
	j check_opcode
opcode_endcheck:
	lb $t9, 0($s0)
	beqz $t9, valid_opcode	
valid_opcode:
	li 	$v0, 4
	la 	$a0, valid
	syscall
	li 	$v0, 4
	la 	$a0, enter
	syscall
	la $s2,type
	addi $s0, $s0, 1
	j check_opr1
invalid_opcode:
	li 	$v0, 4
    	la 	$a0, invalid
    	syscall
    	j endmain 	
check_opr1:
	la $s2, opr1
	lb $t4, 0($s0)
	jal check_type
check_opr2:
	addi $s0, $s0, 1
	la $s2, opr2
	lb $t4, 0($s0)
	jal check_type
check_opr3:
	addi $s0, $s0,1
	la $s2, opr3
	lb $t4, 0($s0)
	jal check_type
	j print_type
check_type: 
	la $s4, register
	la $s3, type
	lb $t5, 0($s3)
	beq $t4, $t5, x_check	
	li 	$v0, 4
	la 	$a0, say_operand
	syscall
	li 	$v0, 4
	la 	$a0, mark
	syscall
	li 	$v0, 4
	addi	$a0, $s2, 0
	syscall
	li 	$v0, 4
	la 	$a0, mark
	syscall
	li 	$v0, 4
	la 	$a0, colon
	syscall
	li 	$v0, 4
	la 	$a0, space
	syscall
	addi $s3, $s3, 2
	lb $t5, 0($s3)
	beq $t4, $t5, check_r
	addi $s3, $s3, 2
	lb $t5, 0($s3)
	beq $t4, $t5,check_i
	addi $s3, $s3, 2
	lb $t5, 0($s3)
	beq $t4, $t5,check_f
	addi $s3, $s3, 2
	lb $t5, 0($s3)
	beq $t4, $t5,check_l
	addi $s3, $s3, 2
	lb $t5, 0($s3)
	la $s4, register
	beq $t4, $t5,check_s
	
x_check:
	lb $t6, 0($s2)
	bnez $t6, invalid_x
	jr $ra		
invalid_x: 
	li 	$v0, 4
	la 	$a0, say_operand
	syscall
	li 	$v0, 4
	la 	$a0, mark
	syscall
	li 	$v0, 4
	addi	$a0, $s2, 0
	syscall
	li 	$v0, 4
	la 	$a0, mark
	syscall
	li 	$v0, 4
	la 	$a0, colon
	syscall
	li 	$v0, 4
	la 	$a0, space
	syscall

check_r:
	 la $s4, register
	 add $s7, $s2, $0
	 j r_loop
r_loop:	 
	lb $t5, 0($s4)
	lb $t6, 0($s7)
	bne $t5, $t6, r_next	
	addi $s4, $s4, 1
	addi $s7, $s7, 1
	lb $t8, 0($s7)
	beqz $t8, return_valid
	j r_loop
r_next:	
	addi $s4, $s4, 1
	lb $t7, 0($s4)
	bnez $t7, r_next
	addi $s4, $s4, 1
	lb $t7, 0($s4)
	beqz $t7, return_invalid
	add $s7, $s2, $0
	j r_loop
	
check_i:
	lb $t5, 0($s2)
	beq $t5, '-', i_next
	beq $t5, '+', i_next
i_loop:
	lb $t9, 0($s2)
	blt $t9, 0x30, return_invalid
	bgt $t9, 0x39, return_invalid
	addi $s2, $s2, 1
	lb $t9, ($s2)
	beqz $t9, return_valid
	j i_loop
i_next: 
	addi $s2, $s2, 1
	j check_i

check_f:
	 la $s4, float
	 add $s7, $s2, $0
	 j f_loop
f_loop:	 
	lb $t5, 0($s4)
	lb $t6, 0($s7)
	bne $t5, $t6, f_next	
	addi $s4, $s4, 1
	addi $s7, $s7, 1
	lb $t8, 0($s7)
	beqz $t8, return_valid
	j f_loop
f_next:	
	addi $s4, $s4, 1
	lb $t7, 0($s4)
	bnez $t7, f_next
	addi $s4, $s4, 1
	lb $t7, 0($s4)
	beqz $t7, return_invalid
	add $s7, $s2, $0
	j f_loop

check_l:
	lb $t5, 0($s2)
	addi $s2, $s2, 1
	blt $t5, 'A', return_invalid
	ble $t5,'Z', l_next
	blt $t5, 'a', return_invalid
	ble $t5,'z', l_next	
l_loop:
	lb $t5, 0($s2)
	beq $t5, '_', i_next
	blt $t5,'A', return_invalid
	ble $t5, 'Z', l_next
	blt $t5,'a', return_invalid
	ble $t5, 'z',l_next
l_next:
	addi $s2, $s2, 1
	lb $t5, 0($s2)
	beqz $t5, return_valid
	j l_loop

check_s: 
	lb $t5, 0($s2)
	beq $t5, '+', s_next
	beq $t5, '-', s_next
s_loopnumber:
	beq $t5, '(', s_rcheck
	blt $t5, '0', return_invalid
	bgt $t5, '9', return_invalid
s_next:
	addi $s2, $s2, 1
	lb $t5, 0($s2)
	beqz $t5, return_valid
	j s_loopnumber
s_rcheck:
	 addi $s2, $s2, 1
	 add $s7, $s2, $0
	 j s_rloop
s_rloop:
	lb $t5, 0($s4)
	lb $t6, 0($s7)
	bne $t5, $t6, s_rnext	
	addi $s4, $s4, 1
	addi $s7, $s7, 1
	lb $t8, 0($s7)
	beq $t8, ')', return_valid
	j s_rloop
s_rnext:
	addi $s4, $s4, 1
	lb $t7, 0($s4)
	bnez $t7, s_rnext
	addi $s4 , $s4 , 1
	lb $t7, 0($s4)
	beqz $t7, return_invalid
	add $s7, $s2, $0
	j s_rloop
print_type:
	addi $s0, $s0, 2
	lb $t5, 0($s0)
	beq $t5, ' ', clock_cycles
	li 	$v0, 4
	la 	$a0, Message1
	syscall
	li $v0, 11
	add  $a0, $t5, $0
	syscall
clock_cycles:
	addi $s0, $s0, 2
	lb $t5, 0($s0)
	li 	$v0, 4
	la 	$a0, enter
	syscall
	li 	$v0, 4
	la 	$a0, say_cycle
	syscall
	li $v0, 11
	add  $a0, $t5, $0
	syscall
	j endmain
return_valid:
	li 	$v0, 4
	la 	$a0, valid
	syscall
	li 	$v0, 4
	la 	$a0, enter
	syscall
	jr $ra

return_invalid:
	li 	$v0, 4
    	la 	$a0, invalid
    	syscall
endmain:
	

		
	
	